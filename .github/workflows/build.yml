name: Build
on:
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash
    working-directory: src

env:
  DOCKER_IMAGE: datetime-helpers
  WORKDIR: /app

jobs:
  setup:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          # TODO(rikhil): make a requirements.test.txt file
          pip install pytest freezegun
          if [[ -f requirements.txt ]]; then pip install --requirement requirements.txt; fi
          # if [[ -f requirements.dev.txt ]]; then pip install --requirement requirements.dev.txt; fi

      - name: Display Python version
        run: python -c "import sys; print(sys.version);"

      - name: Run tests
        run: pytest -c pyproject.toml

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Build
        run: docker build --tag ${DOCKER_IMAGE} --file Dockerfile .

      - name: Check import sort (isort)
        run: docker run --rm --volume $(pwd)/pyproject.toml:${WORKDIR}/pyproject.toml --env CI=true --entrypoint=python ${DOCKER_IMAGE} -m isort --settings-file ${WORKDIR}/pyproject.toml --check .

      - name: Check unused imports & variables (autoflake)
        run: docker run --rm --env CI=true --entrypoint=python ${DOCKER_IMAGE} -m autoflake --check --in-place --remove-unused-variable --remove-all-unused-imports --expand-star-imports --ignore-init-module-imports --recursive .

      - name: Check code style (black)
        run: docker run --rm --volume $(pwd)/pyproject.toml:${WORKDIR}/pyproject.toml --env CI=true --entrypoint=python ${DOCKER_IMAGE} -m black --config ${WORKDIR}/pyproject.toml --check .

      - name: Check code style (flake8)
        run: docker run --rm --volume $(pwd)/.flake8:${WORKDIR}/.flake8 --env CI=true --entrypoint=python ${DOCKER_IMAGE} -m flake8 --config ${WORKDIR}/.flake8

      - name: Check lint (pylint)
        run: docker run --rm --volume $(pwd)/pyproject.toml:${WORKDIR}/pyproject.toml --env CI=true --entrypoint=python ${DOCKER_IMAGE} -m pylint --rcfile ${WORKDIR}/pyproject.toml datetime_helpers tests

      - name: Check typing (mypy)
        run: docker run --rm --volume $(pwd)/pyproject.toml:${WORKDIR}/pyproject.toml --env CI=true --entrypoint=python ${DOCKER_IMAGE} -m mypy --config-file ${WORKDIR}/pyproject.toml datetime_helpers tests

      - name: Run tests (pytest)
        run: |
          CONTAINER_ID=$(docker run -d --rm --volume $(pwd)/pyproject.toml:${WORKDIR}/pyproject.toml --volume $(pwd)/.coveragerc:${WORKDIR}/.coveragerc --env CI=true --entrypoint=sleep ${DOCKER_IMAGE} 100)
          docker exec ${CONTAINER_ID} pytest --cov datetime_helpers/ --cov=datetime_helpers --cov-report term --cov-report=xml --cov-fail-under=90 --cov-config=${WORKDIR}/pyproject.toml --cov-config=${WORKDIR}/.coveragerc tests/
          docker cp ${CONTAINER_ID}:${WORKDIR}/.coverage .
          docker cp ${CONTAINER_ID}:${WORKDIR}/coverage.xml .
          docker stop ${CONTAINER_ID}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
